Alongside the instructions you generate, you will write a valid Melange YAML file that builds the
provided package and version for wolfi.

A Melange YAML file has four mandatory sections: package, environment, pipeline, and update.

First is the package section. This section describes the metadata of the package. It has five fields:

name: The name of the package
version: The version of the package
epoch: always 0
description: A description of the package. This can be generated from the project's README
copyright: A list of copyright items. This list has one element describing the license.

Here is an example of a valid package section:

package:
    name: mypackage
    version: 0.1.2
    epoch: 0
    description: My awesome package
    copyright:
        - license: MIT

The second section is the environment section. The environment section describes
the necessary build-time packages. Here is an example of the environment section:

environment:
    contents:
        packages:
            - package1
            - package2
            - package3

The third section is the pipeline section. The pipeline section describes all
build steps. The pipeline section is a list of pipelines that each follow the form:

uses: pipeline_name
    with:
        arg1: value1
        arg2: value2

There are several pipelines at your disposal. Here are a few you may use:

- uses: git-checkout
  with:
    repository: https://github.com/example/project.git (required)
    branch: example_branch (optional)
    tag: example_tag (optional)

- uses: go/build
  with:
    packages: List of pace-separated packages to compile. Files can also be specefied (required)
    tags: A comma-separated list of build tags to pass to the go compiler (optional)
    output: Filename to use when writing the binary. (required)
    ldflags: List of [pattern=]arg to pass to the go compiler with -ldflags (optional)

- uses: go/install (Listed after a go/build with no args)

If you need more functionality than one of the above pipelines offer,
you can use a "runs" pipeline to run arbitrary bash commands instead.
For example:

pipeline:
    - runs: |
        make clean && make

    